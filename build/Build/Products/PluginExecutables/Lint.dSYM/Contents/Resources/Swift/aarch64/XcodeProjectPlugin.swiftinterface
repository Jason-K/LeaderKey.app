// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.1.2 effective-5.10 (swiftlang-6.1.2.1.2 clang-1700.0.13.5)
// swift-module-flags: -target arm64-apple-macos14.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -package-description-version 999.0 -module-link-name XcodeProjectPlugin -enable-experimental-feature DebugDescriptionMacro -enable-bare-slash-regex -user-module-version 23747 -module-name XcodeProjectPlugin
// swift-module-flags-ignorable:  -interface-compiler-version 6.1.2
import Foundation
import PackagePlugin
import Swift
public struct XcodeProject {
  public let id: XcodeProjectPlugin.XcodeProject.ID
  public typealias ID = Swift.String
  public let displayName: Swift.String
  @available(_PackageDescription, deprecated: 6.0)
  public var directory: PackagePlugin.Path {
    get
  }
  @available(_PackageDescription 6.0)
  public let directoryURL: Foundation.URL
  public let filePaths: PackagePlugin.PathList
  public let targets: [XcodeProjectPlugin.XcodeTarget]
}
public struct XcodeTarget {
  public let id: XcodeProjectPlugin.XcodeTarget.ID
  public typealias ID = Swift.String
  public let displayName: Swift.String
  public let product: XcodeProjectPlugin.XcodeProduct?
  public let dependencies: [XcodeProjectPlugin.XcodeTargetDependency]
  public let inputFiles: PackagePlugin.FileList
}
public struct XcodeProduct {
  public let name: Swift.String
  public let kind: XcodeProjectPlugin.XcodeProduct.Kind
  public enum Kind {
    case application
    case executable
    case framework
    case library
    case other(Swift.String)
  }
}
public enum XcodeTargetDependency {
  case target(XcodeProjectPlugin.XcodeTarget)
  case product(any PackagePlugin.Product)
}
public typealias PackageProduct = PackagePlugin.Product
public struct XcodePluginContext {
  public let xcodeProject: XcodeProjectPlugin.XcodeProject
  @available(_PackageDescription, deprecated: 6.0)
  public var pluginWorkDirectory: PackagePlugin.Path {
    get
  }
  @available(_PackageDescription 6.0)
  public let pluginWorkDirectoryURL: Foundation.URL
  public func tool(named name: Swift.String) throws -> PackagePlugin.PluginContext.Tool
}
public protocol XcodeBuildToolPlugin : PackagePlugin.Plugin {
  func createBuildCommands(context: XcodeProjectPlugin.XcodePluginContext, target: XcodeProjectPlugin.XcodeTarget) throws -> [PackagePlugin.Command]
}
public protocol XcodeCommandPlugin : PackagePlugin.Plugin {
  func performCommand(context: XcodeProjectPlugin.XcodePluginContext, arguments: [Swift.String]) throws
}
